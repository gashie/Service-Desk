-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.api_keys
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    channel_id uuid,
    api_key text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'active'::text,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT api_keys_pkey PRIMARY KEY (id),
    CONSTRAINT api_keys_api_key_key UNIQUE (api_key)
);

CREATE TABLE IF NOT EXISTS public.article_attachments
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    article_id uuid,
    file_path text COLLATE pg_catalog."default",
    uploaded_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT article_attachments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.article_feedback
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    article_id uuid,
    rating integer,
    feedback text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT article_feedback_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.asset_relationships
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    asset_id uuid,
    related_asset_id uuid,
    relationship_type text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT asset_relationships_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.audit_logs
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    entity_type text COLLATE pg_catalog."default",
    entity_id uuid,
    action text COLLATE pg_catalog."default",
    performed_by uuid,
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT audit_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.channel_requests
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    channel_id uuid,
    request_body jsonb,
    jira_request_url text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'pending'::text,
    response_body jsonb,
    error_message text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone,
    retries integer DEFAULT 0,
    CONSTRAINT channel_requests_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.channels
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    api_key text COLLATE pg_catalog."default" NOT NULL,
    allowed_operations text[] COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'active'::text,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT channels_pkey PRIMARY KEY (id),
    CONSTRAINT channels_api_key_key UNIQUE (api_key)
);

CREATE TABLE IF NOT EXISTS public.documents
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    title text COLLATE pg_catalog."default" NOT NULL,
    file_path text COLLATE pg_catalog."default" NOT NULL,
    version text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT documents_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.escalation_events
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    ticket_id uuid,
    escalation_rule_id uuid,
    escalation_action text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT escalation_events_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.escalation_rules
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    module_id uuid,
    escalation_condition text COLLATE pg_catalog."default",
    action text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT escalation_rules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.external_integrations
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    api_url text COLLATE pg_catalog."default" NOT NULL,
    api_key text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT external_integrations_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.integration_events
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    integration_id uuid,
    event_description text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT integration_events_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.integration_logs
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    channel_id uuid,
    jira_url text COLLATE pg_catalog."default",
    request_body jsonb,
    response_body jsonb,
    status text COLLATE pg_catalog."default" NOT NULL DEFAULT 'success'::text,
    error_message text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT integration_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.integration_settings
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    integration_id uuid,
    setting_key text COLLATE pg_catalog."default" NOT NULL,
    setting_value text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT integration_settings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.knowledge_base_articles
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    title text COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default" NOT NULL,
    format text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT knowledge_base_articles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.knowledge_base_categories
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT knowledge_base_categories_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.module_dynamic_fields
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    module_id uuid,
    field_name text COLLATE pg_catalog."default" NOT NULL,
    field_type text COLLATE pg_catalog."default" NOT NULL,
    is_required boolean DEFAULT false,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT module_dynamic_fields_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.module_settings
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    module_id uuid,
    setting_key text COLLATE pg_catalog."default" NOT NULL,
    setting_value text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT module_settings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.modules
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT modules_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notification_logs
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    notification_id uuid,
    recipient text COLLATE pg_catalog."default",
    delivery_status text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notification_logs_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    module_id uuid,
    notification_template text COLLATE pg_catalog."default",
    notification_event text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notifications_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.portal_settings
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    setting_key text COLLATE pg_catalog."default" NOT NULL,
    setting_value text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT portal_settings_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.search_index
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    entity_type text COLLATE pg_catalog."default",
    entity_id uuid,
    search_content tsvector,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT search_index_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.sla_policies
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    module_id uuid,
    target_response_time interval,
    target_resolution_time interval,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT sla_policies_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ticket_attachments
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    ticket_id uuid,
    file_path text COLLATE pg_catalog."default",
    uploaded_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT ticket_attachments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ticket_comments
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    ticket_id uuid,
    comment text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT ticket_comments_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ticket_dynamic_field_values
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    ticket_id uuid,
    field_id uuid,
    field_value text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT ticket_dynamic_field_values_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ticket_relationships
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    ticket_id uuid,
    related_ticket_id uuid,
    relationship_type text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT ticket_relationships_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ticket_sla_status
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    ticket_id uuid,
    sla_policy_id uuid,
    is_within_sla boolean DEFAULT true,
    breach_time timestamp without time zone,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT ticket_sla_status_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.ticket_status_history
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    ticket_id uuid,
    previous_status text COLLATE pg_catalog."default",
    new_status text COLLATE pg_catalog."default",
    changed_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT ticket_status_history_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.tickets
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    module_id uuid,
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    status text COLLATE pg_catalog."default" NOT NULL,
    priority text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone,
    CONSTRAINT tickets_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.time_entries
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    ticket_id uuid,
    workflow_step_id uuid,
    time_spent interval NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT time_entries_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.workflow_actions
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    workflow_id uuid,
    action_description text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflow_actions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.workflow_conditions
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    workflow_id uuid,
    condition_expression text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflow_conditions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.workflow_events
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    workflow_id uuid,
    event_description text COLLATE pg_catalog."default",
    "timestamp" timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflow_events_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.workflow_execution_log
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    workflow_id uuid,
    request_id uuid,
    step_name text COLLATE pg_catalog."default" NOT NULL,
    status text COLLATE pg_catalog."default" NOT NULL,
    completed_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    current_step integer DEFAULT 0,
    CONSTRAINT workflow_execution_log_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.workflow_steps
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    workflow_id uuid,
    step_name text COLLATE pg_catalog."default" NOT NULL,
    step_order integer NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    action_type text COLLATE pg_catalog."default" DEFAULT 'internal'::text,
    CONSTRAINT workflow_steps_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.workflow_transitions
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    workflow_id uuid,
    from_step_id uuid,
    to_step_id uuid,
    transition_condition text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflow_transitions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.workflows
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    module_id uuid,
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT workflows_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.api_keys
    ADD CONSTRAINT api_keys_channel_id_fkey FOREIGN KEY (channel_id)
    REFERENCES public.channels (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.article_attachments
    ADD CONSTRAINT article_attachments_article_id_fkey FOREIGN KEY (article_id)
    REFERENCES public.knowledge_base_articles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.article_feedback
    ADD CONSTRAINT article_feedback_article_id_fkey FOREIGN KEY (article_id)
    REFERENCES public.knowledge_base_articles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.channel_requests
    ADD CONSTRAINT channel_requests_channel_id_fkey FOREIGN KEY (channel_id)
    REFERENCES public.channels (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.escalation_events
    ADD CONSTRAINT escalation_events_escalation_rule_id_fkey FOREIGN KEY (escalation_rule_id)
    REFERENCES public.escalation_rules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.escalation_events
    ADD CONSTRAINT escalation_events_ticket_id_fkey FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.escalation_rules
    ADD CONSTRAINT escalation_rules_module_id_fkey FOREIGN KEY (module_id)
    REFERENCES public.modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.integration_events
    ADD CONSTRAINT integration_events_integration_id_fkey FOREIGN KEY (integration_id)
    REFERENCES public.external_integrations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.integration_logs
    ADD CONSTRAINT integration_logs_channel_id_fkey FOREIGN KEY (channel_id)
    REFERENCES public.channels (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.integration_settings
    ADD CONSTRAINT integration_settings_integration_id_fkey FOREIGN KEY (integration_id)
    REFERENCES public.external_integrations (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.module_dynamic_fields
    ADD CONSTRAINT module_dynamic_fields_module_id_fkey FOREIGN KEY (module_id)
    REFERENCES public.modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.module_settings
    ADD CONSTRAINT module_settings_module_id_fkey FOREIGN KEY (module_id)
    REFERENCES public.modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notification_logs
    ADD CONSTRAINT notification_logs_notification_id_fkey FOREIGN KEY (notification_id)
    REFERENCES public.notifications (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_module_id_fkey FOREIGN KEY (module_id)
    REFERENCES public.modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.sla_policies
    ADD CONSTRAINT sla_policies_module_id_fkey FOREIGN KEY (module_id)
    REFERENCES public.modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ticket_attachments
    ADD CONSTRAINT ticket_attachments_ticket_id_fkey FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ticket_comments
    ADD CONSTRAINT ticket_comments_ticket_id_fkey FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ticket_dynamic_field_values
    ADD CONSTRAINT ticket_dynamic_field_values_field_id_fkey FOREIGN KEY (field_id)
    REFERENCES public.module_dynamic_fields (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ticket_dynamic_field_values
    ADD CONSTRAINT ticket_dynamic_field_values_ticket_id_fkey FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ticket_relationships
    ADD CONSTRAINT ticket_relationships_related_ticket_id_fkey FOREIGN KEY (related_ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ticket_relationships
    ADD CONSTRAINT ticket_relationships_ticket_id_fkey FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ticket_sla_status
    ADD CONSTRAINT ticket_sla_status_sla_policy_id_fkey FOREIGN KEY (sla_policy_id)
    REFERENCES public.sla_policies (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.ticket_sla_status
    ADD CONSTRAINT ticket_sla_status_ticket_id_fkey FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ticket_status_history
    ADD CONSTRAINT ticket_status_history_ticket_id_fkey FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.tickets
    ADD CONSTRAINT tickets_module_id_fkey FOREIGN KEY (module_id)
    REFERENCES public.modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.time_entries
    ADD CONSTRAINT time_entries_ticket_id_fkey FOREIGN KEY (ticket_id)
    REFERENCES public.tickets (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.time_entries
    ADD CONSTRAINT time_entries_workflow_step_id_fkey FOREIGN KEY (workflow_step_id)
    REFERENCES public.workflow_steps (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_actions
    ADD CONSTRAINT workflow_actions_workflow_id_fkey FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_conditions
    ADD CONSTRAINT workflow_conditions_workflow_id_fkey FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_events
    ADD CONSTRAINT workflow_events_workflow_id_fkey FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_execution_log
    ADD CONSTRAINT workflow_execution_log_request_id_fkey FOREIGN KEY (request_id)
    REFERENCES public.channel_requests (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_execution_log
    ADD CONSTRAINT workflow_execution_log_workflow_id_fkey FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_steps
    ADD CONSTRAINT workflow_steps_workflow_id_fkey FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_transitions
    ADD CONSTRAINT workflow_transitions_from_step_id_fkey FOREIGN KEY (from_step_id)
    REFERENCES public.workflow_steps (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_transitions
    ADD CONSTRAINT workflow_transitions_to_step_id_fkey FOREIGN KEY (to_step_id)
    REFERENCES public.workflow_steps (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflow_transitions
    ADD CONSTRAINT workflow_transitions_workflow_id_fkey FOREIGN KEY (workflow_id)
    REFERENCES public.workflows (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.workflows
    ADD CONSTRAINT workflows_module_id_fkey FOREIGN KEY (module_id)
    REFERENCES public.modules (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;